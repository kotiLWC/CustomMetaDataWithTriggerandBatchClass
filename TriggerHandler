/**
Description 		:	1.Referral Twine fields Updated by Restricted User Profile.
						2.Referral Twine fields Updated by Full User Profile.
Created Date		:	24/12/2019.
Author	 			: 	KoteswaraRao
Apex Class			: 	PUB_ReferUpdtBasedOn_Full_ResrtrictUser
Test Class 			:	PUB_OpptyReferralTwineFieldLogic_Test
Last Modified by	: 	KoteswaraRao
Last Modified Date	:   31/12/2019
*/
public class PUB_ReferUpdtBasedOn_Full_ResrtrictUser {
    
    //Fetching Lead with Opportunity
    public static final Map< Lead, Opportunity > leadOptyMap = new Map < Lead, Opportunity > ();
    //For Referral Update
    public static final List < Lead > upDateLeads = new List < Lead > ();
    //For Opportunity Update
    public static final  List < Opportunity > upDateOpp = new List < Opportunity > ();
    //For Referral fields from Custom Metadata Type
    public static final List < String > refFlds = new List < String > ();
    //For Opportunity fields from Custom Metadata Type
    public static final List < String > optyFlds = new List < String > ();
    //For Updated Opportunities Ids 
    public static final set < id > upDatedOptyIDs = new set < id > ();
    
    public static void referralModifiedByRestrictUser(List < Lead > lstRef, Map < id, Lead > MapOldLeads) {
        
        //Fetch Login User Profile Id
        Id profileId= userinfo.getProfileId();
        Profile RestrictedUserProf =[Select Id,Name from Profile where Name=:'PUB Retail Restricted Banker'];
        Id RestrictedUserProfId= RestrictedUserProf.Id; 
  
        //Get Custom Metadata type Values from PUB_RefToOptyTwinFieldsCustMetaData wrapper class
        PUB_TwineFieldsCustomMetaDataWrapper.custMetaDatMappingWrapper wrap = PUB_TwineFieldsCustomMetaDataWrapper.getCustomMetaDataTypeRecs();
        //Map Opportunity twin fields as keyset and Referral twin fields as Values
        Map < string, string > Oppty_Map = wrap.OptyToRefMap;
        //Fetch Referral twin fields
        List < String > refFlds = wrap.RefFields;
        //Fetch Opportunity twin fields
        List < String > optyFlds = wrap.OptyFields;
        //String of Referral field for dynamic query
        String ReferralCustMetaDatFlds = string.join(refFlds, ',');
        
        try {
            if(profileId == RestrictedUserProfId){
                //Dynamic query for Referral records fetching
                String query = 'SELECT Id,Name,Opportunity__c,opportunity__r.Name,' + ReferralCustMetaDatFlds + ' From Lead where Id In:lstRef';
                // List of Referrals
                List < Lead > lstLeads = database.query(query);
                //check lstLeads contains values
                if (!lstLeads.isEmpty() && lstLeads.size() > 0) {
                    for (Lead lVal: lstLeads) {
                        //Initialize Old Values using Map
                        Lead oldLead = MapOldLeads.get(lVal.Id);
                        for (String str: refFlds) {
                            //Check Old values and new Values are different
                            if (lVal.get(str) != null && oldLead.get(str) != null) {
                                if (lVal.get(str) != oldLead.get(str)) {
                                    //Set Modified flag as true
                                    lVal.Modified_Flag__c = true;
                                }
                            }
                        }
                        //add to update list
                        upDateLeads.add(lVal);
                    }
                }
                //Update Referrals
                if (upDateLeads.size() > 0) {
                    RecursiveTriggerHandler.isLeadUpdate = false;
                    Database.SaveResult[] srList = Database.update(upDateLeads, false);
                    // Iterate through each returned result
                    for (Database.SaveResult sr: srList) {
                        if (sr.isSuccess()) {
                            // Operation was successful, so get the ID of the record that was processed
                            System.debug('Successfully Updated Referral By Restricted User. Referral ID: ' + sr.getId());
                        } else {
                            // Operation failed, so get all errors                
                            for (Database.Error err: sr.getErrors()) {
                                System.debug('The following error has occurred at Referral Update.');
                                System.debug(err.getStatusCode() + ': ' + err.getMessage());
                                System.debug('Referral fields that affected this error: ' + err.getFields());
                            }
                        }
                    }
                }
            }
        } catch (QueryException e) {
            System.debug('Exception : ' + e.getMessage());
        }
    }
    public static void referralModifiedByFullUser(List < Lead > lstRef, Map < id, Lead > MapOldLeads) {
        
        System.debug('===Full User====');
        //Fetch Login User Profile Id
        Id profileId= userinfo.getProfileId();
        Profile RestrictedUserProf =[Select Id,Name from Profile where Name=:'PUB Retail Restricted Banker'];
        Id RestrictedUserProfId= RestrictedUserProf.Id; 
        Map<id,User> mapUserIds = new Map<id,User>();
        //Profile pid =[Select id FROM Profile where Name=:'PUB Retail Restricted Banker'];
        List<User> lstUsers =[Select id,UserName FROM User where ProfileId=:RestrictedUserProfId];
       	system.debug('=====lIST OF Restricted UserS===='+lstUsers);

        for(User u : lstUsers){
            system.debug('=====Restricted User===='+u.Id);
            mapUserIds.put(u.Id, u);
        }
        
        //Fetch Data from Custom Metadata Type
        PUB_TwineFieldsCustomMetaDataWrapper.custMetaDatMappingWrapper wrap = PUB_TwineFieldsCustomMetaDataWrapper.getCustomMetaDataTypeRecs();
        //Map Opportunity twin fields as keyset and Referral twin fields as Values
        Map < String, String > Oppty_Map = wrap.OptyToRefMap;
        //Fetch Referral twin fields
        List < String > refFlds = wrap.RefFields;
        //Fetch Opportunity twin fields
        List < String > optyFlds = wrap.OptyFields;
        //String of Referral field for dynamic query
        String ReferralCustMetaDatFlds = String.join(refFlds, ',');
        try {
            if(profileId != RestrictedUserProfId){
                //Dynamic query for Referral records fetching
                String query = 'SELECT Id,Name,Opportunity__c,opportunity__r.Name,opportunity__r.CloseDate,opportunity__r.OwnerId,' + ReferralCustMetaDatFlds + ' From Lead where Id In:lstRef';
                system.debug(query);
                // List of Referrals
                List < Lead > lstLeads = database.query(query);
                if (!lstLeads.isEmpty() && lstLeads.size() > 0) {
                   Opportunity opVal;
                    for (Lead lVal: lstLeads) {
                        //Initialize Old Referral using map
                        Lead oldLead = MapOldLeads.get(lVal.Id);
                        for (String str: refFlds) {
                            // check Old and New values are same
                            if (lVal.get(str) != oldLead.get(str)) {
                                opVal = lVal.Opportunity__r;
                                if (opVal != null) {
                                    //add leads with Opportunity
                                    leadOptyMap.put(lval, opVal);
                                }
                            }
                        } 
                    } 
                } 
                //Check Map of Leads with Opportunity
                /*if (!leadOptyMap.isEmpty()) {
                    for (Lead obj: leadOptyMap.keyset()) {
                        // Get Opportunity values using Lead with Opportunity
                        Opportunity updtOpty = leadOptyMap.get(obj);
                        system.debug('updtOpty' + updtOpty);
                        if (!Oppty_Map.isEmpty()) {
                            for (String key: Oppty_Map.keyset()) {
                                Object value = (Object) obj.get(Oppty_Map.get(key));
                                if (value != null) {
                                    updtOpty.put(key, value);
                                } else {
                                    updtOpty.put(key, null);
                                }
                            }
                        }
                        //add updating Opportunities to the list
                        upDateOpp.add(updtOpty);
                    }
                } */
            Object value;
            if(!leadOptyMap.isEmpty()){
                for(Lead obj : leadOptyMap.keyset()){
                   system.debug('====lEAD OWNER ID===='+obj.OwnerId);
                    Opportunity updtOpty = leadOptyMap.get(obj);
                    if(mapUserIds.containskey(obj.OwnerId)){
                        if(!Oppty_Map.isEmpty()){
                            for(string key:Oppty_Map.keyset()){
                                if(key == 'OwnerId'){
                                 value = updtOpty.OwnerId;
                                }else{
                                 value = (Object)obj.get(Oppty_Map.get(key));
                                }

                                if (value != null) {
                                    updtOpty.put(key, value);
                                } 
                                else {
                                   // updtOpty.put(key, null);
                                }
                            }
                        }
                    // upDateOpp.add(updtOpty);
                    }else{
                        if(!Oppty_Map.isEmpty()){
                        for(string key:Oppty_Map.keyset()){
                            value  = (Object)obj.get(Oppty_Map.get(key));
                            //Update twine field key with value
                            if(value != null){
                                updtOpty.put(key,value);
                            }else{
                                //updtOpty.put(key,null);   
                            }
                        }
                    }
                    }
                    //Update list of Opportunities to Final Opportunity
                    upDateOpp.add(updtOpty);
                }
            }
                if (upDateOpp.size() > 0) {
                    RecursiveTriggerHandler.isOpportunityUpdate = false;
                    Database.SaveResult[] srList = Database.update(upDateOpp, false);
                    // Iterate through each returned result
                    for (Database.SaveResult sr: srList) {
                        if (sr.isSuccess()) {
                            upDatedOptyIDs.add(sr.getId());
                            // Operation was successful, so get the ID of the record that was processed
                            System.debug('Successfully updated Opportunity by full user. Opportunity ID: ' + sr.getId());
                        } else {
                            // Operation failed, so get all errors                
                            for (Database.Error err: sr.getErrors()) {
                                System.debug('The following error has occurred at Opportunity Update.');
                                System.debug(err.getStatusCode() + ': ' + err.getMessage());
                                System.debug('Opportunity fields that affected this error: ' + err.getFields());
                            }
                        }
                    }
                } //end upDateOpp
                if (upDatedOptyIDs.size() > 0) {
                    String oppQuery = 'SELECT Id,Name,Opportunity__c,Modified_Flag__c From Lead where Opportunity__c IN:upDatedOptyIDs';
                    List < Lead > UpdateModifiedReferrals = Database.query(oppQuery);
                    for (Lead leadVal: UpdateModifiedReferrals) {
                        leadVal.Modified_Flag__c = false;
                        upDateLeads.add(leadVal);
                    }
                } //end upDatedOptyIDs
                if (upDateLeads.size() > 0) {
                    //Update Final Referral
                    RecursiveTriggerHandler.isLeadUpdate = false;
                    //Database.update(upDateLeads);
                    Database.SaveResult[] srList = Database.update(upDateLeads, false);
                    // Iterate through each returned result
                    for (Database.SaveResult sr: srList) {
                        if (sr.isSuccess()) {
                            // Operation was successful, so get the ID of the record that was processed
                            System.debug('Successfully Updated Referral By Full User. Referral ID: ' + sr.getId());
                        } else {
                            // Operation failed, so get all errors                
                            for (Database.Error err: sr.getErrors()) {
                                System.debug('The following error has occurred at Referral Update.');
                                System.debug(err.getStatusCode() + ': ' + err.getMessage());
                                System.debug('Referral fields that affected this error: ' + err.getFields());
                            }
                        }
                    }
                }
            }
        }
        Catch(QueryException e) {
            System.debug('Exception : ' + e.getMessage());
        }
    }
}
